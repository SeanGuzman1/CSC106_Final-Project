var display = 0;
//What screen the game is currently on
var gameSize = 16;
//The grid size (x by x)
var bombCount = 0;
//Number of bombs
var w = floor((width - 70) / gameSize);
//Width of the cell, determined based off math and the number of cells contained in the grid
var gameOver;
//Determines if the game is over or not
var firstClick;
//Determines if the first click is occuring
var flag = false;
var cellsRevealed;
var time = millis();
var beginTime;
var endTime;

//BITMOJI CODE--(DEVIN A.)-----------------------------------
var drawBody = function(xPos,yPos,size){
    noStroke();
    fill(0,0,0);
    rect(xPos + 30/79 * size ,yPos + 137/79 * size,84/79 * size,68/79 * size);
};


var drawMouth=function(xPos,yPos,size){
    noStroke();
    fill(255, 255, 255);
    arc(xPos + 72/79 * size, yPos + 115/79 * size, 34/79 * size, 27/79 * size, 15, 192);
};

var drawNose=function(xPos,yPos,size){
    noFill();
    stroke(0,0,0);
    bezier(xPos + 66/79 * size, yPos + 110/79 * size, xPos + 88/79 * size, yPos + 119/79 * size, xPos + 79/79 * size, yPos + 105/79 * size, xPos + 72/79 * size, yPos + 94/79 * size);
};

var drawPupil=function(xPos,yPos,size){
    noStroke();
    fill(0, 0, 0);
    ellipse(xPos + 59/79 * size,yPos + 95/79 * size,7/79 * size,6/79 * size);//Pupil
    ellipse(xPos + 85/79 * size,yPos + 95/79 * size,7/79 * size,6/79 * size);
};

var drawEyes=function(xPos,yPos,size){
    noStroke();
    fill(255, 255, 255);
    ellipse(xPos + 59/79 * size,yPos + 95/79 * size,17/79 * size,8/79 * size);
    ellipse(xPos + 85/79 * size,yPos + 95/79 * size,17/79 * size,8/79 * size);
    drawPupil(xPos,yPos,size);
};

var drawJaw=function(xPos,yPos,size){
    noStroke();
    fill(255, 255, 255);//Jaw
    arc(xPos + 28/79 * size, yPos + 151/79 * size, 30/79 * size, 104/79 * size, -73, -21);
    arc(xPos + 115/79 * size, yPos + 151/79 * size, 30/79 * size, 104/79 * size, -159, -101);
};

var drawHairline=function(xPos,yPos,size){
    noStroke();
    fill(150, 123, 72);
    quad(xPos + 49/79 * size,yPos + 71/79 * size,xPos + 94/79 * size,yPos + 71/79 * size,xPos + 107/79 * size,yPos + 105/79 * size,xPos + 38/79 * size,yPos + 105/79 * size);
    drawEyes(xPos,yPos,size);//Eyes are drawn here to avoid layering issues
};

var drawFace=function(xPos,yPos,size){
    noStroke();
    fill(150, 123, 72);
    ellipse(xPos + 72/79 * size,yPos + 100/79 * size,79/79 * size,85/79 * size);
    drawNose(xPos,yPos,size);
    drawMouth(xPos,yPos,size);
    drawJaw(xPos,yPos,size);
};

var drawEars=function(xPos,yPos,size){
    noStroke();
    fill(150, 123, 72);
    ellipse(xPos + 110/79 * size,yPos + 90/79 * size,11/79 * size,21/79 * size);
    ellipse(xPos + 33/79 * size,yPos + 90/79 * size,11/79 * size,21/79 * size);
};

var drawHair=function(xPos,yPos,size){
    noStroke();
    fill(40, 34, 4);
    ellipse(xPos + 71/79 * size,yPos + 76/79 * size,72/79 * size,51/79 * size);
    drawHairline(xPos,yPos,size);
};

var drawHat=function(xPos,yPos,size){
    fill(0, 0, 0);
    stroke(100,100,100);
    arc(xPos + 71/79 * size,yPos + 69/79 * size,69/79 * size,65/79 * size,180,361);//Top of hat
    bezier(xPos + 36/79 * size, yPos + 69/79 * size, xPos + 20/79 * size, yPos + 93/79 * size, xPos + 120/79 * size, yPos + 93/79 * size, xPos + 106/79 * size, yPos + 69/79 * size);
        noFill();
        arc(xPos + 70/79 * size,yPos + 69/79 * size,69/79 * size,-7/79 * size,197,366);
};

var drawBMJ=function(x,y,h){

    drawBody(x,y,h);
    drawFace(x,y,h);
    drawEars(x,y,h);
    drawHair(x,y,h);
    drawHat(x,y,h);
};
//----------END BITMOJI CODE (DEVIN A.)-----------------------------

//----------BITMOJI CODE-(SEAN G.)----------------------------------
var drawMe=function(x,y,h)
{
    //torso
    fill(0, 0, 0);
    rect(x+(h/150*45),y+(h/150*62),(h/150*71),(h/150*100),5);
    //chest
    fill(0, 0, 0);
    rect(x+(h/150*41),y+(h/150*65),(h/150*78),(h/150*45),4);
    //arm
    fill(241,194,125);
    rect(x+(h/150*17),y+(h/150*78),(h/150*22),(h/150*52),0);
    fill(241,194,125);
    rect(x+(h/150*122),y+(h/150*78),(h/150*22),(h/150*51),0);
    //shoulder
    fill(0, 0, 0);
    ellipse(x+(h/150*27),y+(h/150*78),h/150*41,h/150*35);
    fill(0, 0, 0);
    ellipse(x+h/150*134,y+h/150*78,h/150*41,h/150*35);
    //hand
    fill(241,194,125);
    ellipse(x+(h/150*28),y+(h/150*138),(h/150*24),h/150*24);
    fill(241,194,125);  
    ellipse(x+(h/150*134),y+(h/150*138),h/150*24,h/150*24);
    //neck
    fill(241,194,125);
    rect(x+(h/150*62),y+(h/150*25),(h/150*36),(h/150*45),0);
    //Head
    fill(241,194,125);
    ellipse(x+(h/150*81),y+(h/150*32),(h/150*60),h/150*66);
    //Eye
    fill(237, 230, 230);
    ellipse(x+(h/150*67),y+(h/150*26),h/150*14,h/150*12);
    fill(237, 230, 230);
    ellipse(x+(h/150*93),y+(h/150*26),(h/150*14),h/150*12);
    //Pupil
    fill(118, 71, 0);
    ellipse(x+(h/150*93),y+(h/150*25),(h/150*7),h/150*8);
    fill(118, 71, 0);
    ellipse(x+67*h/150,y+(h/150*25),(h/150*7),h/150*8);
    //Eye lid
    fill(241,194,125);
    arc(x+(h/150*93),y+(h/150*23),(h/150*12),(h/150*10),-180,0);
    fill(241,194,125);
    arc(x+(h/150*67),y+(h/150*23),(h/150*12),(h/150*10),-180,0);
    //Smile
    fill(255, 255, 255);
    arc(x+(h/150*81),y+(h/150*41),(h/150*24),(h/150*24),0,180);   
    rect(x+(h/150*70),y+(h/150*41),(h/150*23),(h/150*0),0);
    rect(x+(h/150*71),y+(h/150*46),(h/150*19),(h/150*0),0);
    //hair
    fill(49, 20, 0);
    ellipse(x+50*h/150,y+0*h/150,20*h/150,20*h/150);
    fill(49, 20, 0);
    ellipse(x+60*h/150,y+0*h/150,20*h/150,20*h/150);
    fill(49, 20, 0);
    ellipse(x+55*h/150,y-6*h/150,20*h/150,20*h/150);
    fill(49, 20, 0);
    ellipse(x+70*h/150,y+0*h/150,20*h/150,20*h/150);
    fill(49, 20, 0);
    ellipse(x+65*h/150,y-11*h/150,20*h/150,20*h/150);
    fill(49, 20, 0);
    ellipse(x+78*h/150,y+0*h/150,20*h/150,20*h/150);
    fill(49, 20, 0);
    ellipse(x+76*h/150,y-8*h/150,20*h/150,20*h/150);
    fill(49, 20, 0);
    ellipse(x+112*h/150,y+0*h/150,20*h/150,20*h/150);
    fill(49, 20, 0);
    ellipse(x+102*h/150,y+0*h/150,20*h/150,20*h/150);
    fill(49, 20, 0);
    ellipse(x+106*h/150,y-7*h/150,20*h/150,20*h/150);
    fill(49, 20, 0);
    ellipse(x+92*h/150,y+0*h/150,20*h/150,20*h/150);
    fill(49, 20, 0);
    ellipse(x+93*h/150,y-11*h/150,20*h/150,20*h/150);
    fill(49, 20, 0);
    ellipse(x+88*h/150,y+0*h/150,20*h/150,20*h/150);
    fill(49, 20, 0);
    ellipse(x+81*h/150,y-14*h/150,20*h/150,20*h/150);
    fill(49, 20, 0);
    ellipse(x+114*h/150,y+12*h/150,20*h/150,20*h/150);
    fill(49, 20, 0);
    ellipse(x+49*h/150,y+12*h/150,20*h/150,20*h/150); 
};
//----------END BITMOJI CODE-(SEAN G.)------------------------------

//Khan Button & Functions
var Button = function(config) {
    this.x = config.x || 0;
    this.y = config.y || 0;
    this.width = config.width || 150;
    this.height = config.height || 50;
    this.label = config.label || "Click";
    this.onClick = config.onClick || function() {};
};

Button.prototype.draw = function() {
    fill(89, 89, 89);
    rect(this.x, this.y, this.width, this.height, 5);
    fill(0, 0, 0);
    textSize(19);
    textAlign(CENTER, CENTER);
    text(this.label, this.x + this.width/2, this.y+this.height/2);
};

Button.prototype.isMouseInside = function() {
    return mouseX > this.x &&
           mouseX < (this.x + this.width) &&
           mouseY > this.y &&
           mouseY < (this.y + this.height);
};

Button.prototype.handleMouseClick = function() {
    if (this.isMouseInside()) {
        this.onClick();
    }
};


var Cell = function(xIndex, yIndex, w){ //Cell object
    this.w = w;
    //Width of the cell
    this.xIndex = xIndex;
    //Allows the cell to track its own coordinates within the grid
    this.yIndex = yIndex;
    this.isRevealed = false;
    this.x = 35 + this.xIndex * this.w;
    //Math to determine where the cell is
    this.y = 55 + this.yIndex * this.w;
    this.color = color(150, 150, 150);
    //Gives the cell a color that can be changed
    if(floor(random(0, 8)) === 1){ 
        //Random chance for a cell to be a bomb (About 1 in 5)
        this.isBomb = true;
        bombCount++;
        //Keeps track of the number of bombs for the win condition
    }
    else{
        this.isBomb = false;
    }
};

//--------------------Makes the Grid Array--------------------------
//2D array that holds all the objects in essentially a data grid that can be refferenced in the same way that a normal grid can by using the cells' index as their coordinates.
var gridArray = function() {
    var yArr = [];//
    for (var i = 0; i < gameSize; i++){
        //Based on the game size, the code loops a certain amount of times
        var xArr = [];
        for(var j = 0; j < gameSize; j++){
            xArr[j] = new Cell( i, j, w);
            //Makes a new cell object inside the array
        }
        yArr.push(xArr);
        //Places the created cells stored in xArr into yArr, which forms the rows
    }
    return(yArr);
};

var grid = gridArray();
//Executes the function and allows for the storing of the array

var winCond = (grid.length * grid.length) - bombCount;
//Establishes the win condition for the game by subtracting the amount of bombs from the total amount of cells revealed

//--------------------------Cell Functions-------------------------------
Cell.prototype.perBombs = function(){//Calculates the amount of bombs surrounding a cell
    var numBombs = 0;
        for(var yOff = -1; yOff < 2; yOff++){//Loop that scans all of the surrounding cells, ignoring the instances where it would have to scan outise of the grid
            for(var xOff = -1; xOff < 2; xOff++){
                var x = this.xIndex - xOff;
                var y = this.yIndex - yOff;
                if (x >= 0 && x < gameSize && y >= 0 && y < gameSize){
                    if(grid[x][y].isBomb === true){//Increases the count of bombs inside the cell if the scanned cell is a bomb
                        numBombs++;
                    }
                }
            }
        }
    return(numBombs);//Gives the amount of bombs to the cell in order for it to be displayed and used for other calculations   
};
Cell.prototype.draw = function(){//Gives the cell its appearance
    fill(this.color);
    rect(this.x, this.y, this.w, this.w);
    if(this.isRevealed === true){//Gives a different appearance if the cell is revealed
        if(this.isBomb === false){//Normal revealed cell appearance
            this.color = color(255, 255, 255);
            textAlign(CENTER,CENTER);
            textSize(w);
            fill(0 +(50*this.perBombs()), 0 + (10*this.perBombs()), (10*this.perBombs()));//Uses the perBombs function to determine what number to display inside the cell
            text(this.perBombs(), this.x + w/2 , this.y + w/2);
        }
        if(this.isBomb === true){//Gives the cell a different appearance if it is a bomb
            this.color = color(200, 0, 0);
        }
    }
};

Cell.prototype.show = function(){//Makes the cell appear and contains their individual actions
    if(this.isBomb === true){//What bombs do
        if(firstClick === true){//If the first click is on a bomb, the bomb is no longer a bomb, this makes it impossible to lose on the first click
            this.isBomb = false;
            this.show();
            firstClick = false;
        }
        else{//After the first click, if a bomb is clicked the game ends and all the cells are revealed
            for (var i = 0; i < gameSize; i++){
                for(var j = 0; j < gameSize; j++){
                    grid[j][i].isRevealed = true;
                }   
            }
            gameOver = true;
            endTime = floor(((millis()-time)/1000).toFixed(2)) - beginTime;
            //Determines the time at which the game ended
        }
    }
    else {
        this.isRevealed = true;
        firstClick = false;
        cellsRevealed++;
        if(this.perBombs() === 0){
            for(var yOff = -1; yOff < 2; yOff++){//Loop that scans all the cells around a cell with no bombs and reveals them and the cells around them if they also have no bombs around them
                for(var xOff = -1; xOff < 2; xOff++){
                    var x = this.xIndex - xOff;
                    var y = this.yIndex - yOff;
                    if (x >= 0 && x < gameSize && y >= 0 && y < gameSize){
                        if(grid[x][y].isBomb === false && grid[x][y].isRevealed === false)
                        {
                            grid[x][y].show();
                        }
                    }
                }
            }
        }
    }
};
//--------------------------------------------------------------------------
var StartButton = new Button({//Start button object
    x: 130,
    y: 200,
    label: "Start",
    onClick: function() {
        display = 1;
        firstClick = true;
        gameOver = false;
        cellsRevealed = 0;
        beginTime = floor(((millis()-time)/1000).toFixed(2));
    }
});
var RestartButton = new Button({//Restart button object
    x: 317,
    y: 2,
    width: 80,
    label: "Restart",
    onClick: function() {
        Program.restart();
    }
});

var mainMenuUI = function(){//Details for the main menu
    background(255, 255, 255);
    textSize(40);
    textAlign(CENTER,CENTER);
    fill(0, 0, 0);
    text("Minesweeper", 200, 100);
    textSize(10);
    text("By Devin Almeida and Sean Guzman", 200, 133);

    StartButton.draw();
    drawBMJ(47,101,43);
    drawMe(273,131,71);
};

mouseClicked = function(){
    if(display === 0){
        //For the main menu buttons
        StartButton.handleMouseClick();
    }
    else if(display === 1){//If the game is running, the restart button alongside the cells can be clicked
        RestartButton.handleMouseClick();
        //Math to determine the cell that you are clicking on
        var xCell = floor((mouseX - 36) / w);
        var yCell = floor((mouseY - 55) / w);
        if(grid[xCell][yCell].isRevealed === false){
            grid[xCell][yCell].show();
            //Executes the show function based on the cell that you clicked
        }
    }
};

draw = function() {
    //Draws the main menu
    if(display === 0){
        mainMenuUI();
    }
    else if (display === 1){
        //Game Timer
        fill(255, 255, 255);
        rect(3,3,57,30);
        textSize(20);
        textAlign(CENTER, CENTER);
        fill(0,0,0);
        if(gameOver === false && cellsRevealed !== winCond){
            text(floor(((millis()-time)/1000).toFixed(2)) - beginTime,30,18);
        }
        else if(gameOver === true || cellsRevealed === winCond){
            text(endTime, 30, 18);//Holds the time at which the game ends
        }
        RestartButton.draw();
        //Draws the restart button
        if (gameOver === true){//Game is lost
            text("Game Over", 113, 20);
        }
        else if(cellsRevealed === winCond){//Game is won
            text("You Win!", 100, 20);
            
        }
        for (var k = 0; k < gameSize; k++){
            for (var l = 0; l < gameSize; l++){
                grid[l][k].draw();//Runs the code to draw the grid
            }    
        }
    }
};
